# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: unsatais
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: products-service
# "service" is the name of this project. This will also be added to your AWS resource names.
service: products-service

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  environment:
    DYNAMO_TABLE: Products-Dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/Products-Dev

functions:
  createProduct:
    handler: handler.create_product
    events:
      - http:
          path: products
          method: post

  getAllProducts:
    handler: handler.get_all_products
    events:
      - http:
          path: products
          method: get
          

  getProduct:
    handler: handler.get_product
    events:
      - http:
          path: products/{product_id}
          method: get
          

  updateProduct:
    handler: handler.update_product
    events:
      - http:
          path: products/{product_id}
          method: put
          

  deleteProduct:
    handler: handler.delete_product
    events:
      - http:
          path: products/{product_id}
          method: delete
          

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products-Dev
        AttributeDefinitions:
          - AttributeName: ProductID
            AttributeType: S
        KeySchema:
          - AttributeName: ProductID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"

    ProductsOptions:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        ResourceId:
          Ref: ApiGatewayResourceProducts
        RestApiId:
          Ref: ApiGatewayRestApi
        Integration:
          Type: MOCK
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
          RequestTemplates:
            application/json: '{ "statusCode": 200 }'
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Methods: true

    ProductsProductIdOptions:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        ResourceId:
          Ref: ApiGatewayResourceProductsProductidVar
        RestApiId:
          Ref: ApiGatewayRestApi
        Integration:
          Type: MOCK
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
          RequestTemplates:
            application/json: '{ "statusCode": 200 }'
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Methods: true
